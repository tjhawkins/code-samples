using Schedule.App.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;

namespace Schedule.App.Controllers
{
    [RoutePrefix("api/Employee")]
    [Authorize]
    public class EmployeeController : BaseController
    {
        [HttpGet]
        [ResponseType(typeof(List<Employee>))]
        public async Task<IHttpActionResult> GetEmployees()
        {
            var employees = await scheduledb.Employees.ToListAsync();

            if(employees == null || employees.Count == 0)
            {

                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("No employees found")
                };
                throw new HttpResponseException(resp);
            }
            return Ok(GetResponse(employees));
         }

        [HttpGet]
        [Route("{id}/Availability")]
        [ResponseType(typeof(List<EmployeeAvailability>))]
        public async Task<IHttpActionResult> GetEmployeeAvailibity(int id)
        {
            if (id == 0)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Invalid Employee ID")
                };
                throw new HttpResponseException(resp);
            }

            var avaiability = await scheduledb.EmployeeAvailability.Where(a => a.EmployeeID ==id).ToListAsync();
            return Ok(GetResponse(avaiability));
        }

        [HttpGet]
        [Route("{id}/Positions")]
        [ResponseType(typeof(List<EmployeePosition>))]
        public async Task<IHttpActionResult> GetEmployeePositions(int id)
        {
            if (id == 0)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Invalid Employee ID")
                };
                throw new HttpResponseException(resp);
            }

            var positions = await scheduledb.EmployeePositions.Where(a => a.EmployeeID == id).ToListAsync();
            return Ok(GetResponse(positions));
        }

        [HttpGet]
        [Route("{id}/SocialMedia")]
        [ResponseType(typeof(List<EmployeeSocialMedia>))]
        public async Task<IHttpActionResult> GetEmployeeSocialMedia(int id)
        {
            if (id == 0)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Invalid Employee ID")
                };
                throw new HttpResponseException(resp);
            }

            var social = await scheduledb.EmployeeSocialMedia.Where(a => a.EmployeeID == id).ToListAsync();
            return Ok(GetResponse(social));
        }

        [HttpGet]
        [Route("{id}/TimeOffRequests")]
        [ResponseType(typeof(List<EmployeeSocialMedia>))]
        public async Task<IHttpActionResult> GetEmployeeTimeOffRequests(int id, DateTime weekendDate)
        {
            if (id == 0)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Invalid Employee ID")
                };
                throw new HttpResponseException(resp);
            }

            var requests = await scheduledb.EmployeeTimeOffRequests.Where(a => a.EmployeeID == id && (a.ShiftDate >= weekendDate.AddDays(-7) && a.ShiftDate <= weekendDate)).ToListAsync();
            return Ok(GetResponse(requests));
        }

        //POST METHODS
        [HttpPost]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> CreateEmployee(Employee employee)
        {
           
           if(!ModelState.IsValid)
            return BadRequest(ModelState);

            scheduledb.Employees.Add(employee);
            await scheduledb.SaveChangesAsync();
            
            return Ok();
        }

        [HttpPost]
        [Route("Availability")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> AddEmployeeAvailability(EmployeeAvailability availability)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.EmployeeAvailability.Add(availability);
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPost]
        [Route("Position")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> AddEmployeePosition(EmployeePosition position)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.EmployeePositions.Add(position);
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPost]
        [Route("SocialMedia")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> AddEmployeeSocialMedia(EmployeeSocialMedia type)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.EmployeeSocialMedia.Add(type);
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPost]
        [Route("TimeOffRequest")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> AddEmployeeTimeOffRequest(EmployeeTimeOffRequest request)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.EmployeeTimeOffRequests.Add(request);
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        //PUT METHODS
        [HttpPut]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult>UpdateEmployee(Employee employee)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.Entry(employee).State = EntityState.Modified;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPut]
        [Route("Availability")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> UpdateEmployeeAvailability(EmployeeAvailability availability)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.Entry(availability).State = EntityState.Modified;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPut]
        [Route("Position")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> UpdateEmployeePosition(EmployeePosition position)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.Entry(position).State = EntityState.Modified;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPut]
        [Route("SocialMedia")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> UpdateEmployeeSocialMedia(EmployeeSocialMedia type)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.Entry(type).State = EntityState.Modified;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpPut]
        [Route("TimeOffRequest")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> UpdateEmployeeTimeOffRequest(EmployeeTimeOffRequest request)
        {

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            scheduledb.Entry(request).State = EntityState.Modified;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        //DELETE METHODS
        [HttpDelete]
        [Route("{EmployeeID}/Availability/{DayOfWeek}")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> DeletedEmployeeAvailability(int employeeId, int dayofWeek)
        {

            if (employeeId == 0 || dayofWeek == 0)
                return BadRequest("Invalid request");

            var availability = scheduledb.EmployeeAvailability.Where(p => p.EmployeeID == employeeId && p.DayOfWeek == dayofWeek);
            if (availability == null)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Availability not found")
                };
                throw new HttpResponseException(resp);
            }

            scheduledb.Entry(availability).State = EntityState.Deleted;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpDelete]
        [Route("{EmployeeID}/Position/{PositionID}")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> DeleteEmployeePosition(int employeeId, int positionId)
        {

            if (employeeId == 0 || positionId == 0)
                return BadRequest("Invalid request");

            var position = scheduledb.EmployeePositions.Where(p => p.EmployeeID == employeeId && p.PositionID == positionId);
            if(position == null)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Employee positions not found")
                };
                throw new HttpResponseException(resp);
            }
            scheduledb.Entry(position).State = EntityState.Deleted;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpDelete]
        [Route("{EmployeeID}/SocialMedia/{TypeID}")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> DeleteEmployeeSocialMedia(int employeeId, int typeId)
        {

            if (employeeId == 0 || typeId == 0)
                return BadRequest("Invalid request");

            var social = scheduledb.EmployeeSocialMedia.Where(p => p.EmployeeID == employeeId && p.TypeID == typeId);
            if (social == null)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Social Media not found")
                };
                throw new HttpResponseException(resp);
            }
            scheduledb.Entry(social).State = EntityState.Deleted;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }

        [HttpDelete]
        [Route("{EmployeeID}T/imeOffRequest{Date}")]
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> DeleteEmployeeTimeOffRequest(int employeeId, DateTime date)
        {

            if (employeeId == 0 || date == null)
                return BadRequest("Invalid Request");

            if (DateTime.Now >= date.AddDays(-7))
                return BadRequest("Unable to remove request: Within Current Schedule Period");

            var request = scheduledb.EmployeeTimeOffRequests.Where(p => p.EmployeeID == employeeId && p.ShiftDate == date);
            if (request == null)
            {
                var resp = new HttpResponseMessage(HttpStatusCode.InternalServerError)
                {
                    Content = new StringContent("Request not found")
                };
                throw new HttpResponseException(resp);
            }
            scheduledb.Entry(request).State = EntityState.Deleted;
            await scheduledb.SaveChangesAsync();

            return Ok();
        }
    }
}


