Imports System.Data.SqlClient
Imports Infragistics.Web.UI.GridControls
Imports Infragistics.Web.UI
Imports System.Net.Mail
Imports System.Web.Services

Public Class EditCase
    Inherits System.Web.UI.Page
    Private Shared configString As String = ConfigurationManager.ConnectionStrings("sccrmConnection").ConnectionString
    Private data As New Data()

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If Not IsPostBack Then

            Try
                If User.IsInRole("User") Or User.IsInRole("Vacation Spc") Or User.IsInRole("Scheduler") Then
                    editFollowUp.Value = "False"
                Else
                    editFollowUp.Value = "True"
                End If

                '' Clear Errors
                If Session("Error") IsNot Nothing Then
                    If Session("Error") <> String.Empty Then
                        errorMessage.Text = Session("Error")
                        Session.RemoveAll()
                    End If
                End If

                '' Retrieve Case Number
                Dim caseNumber As String = decodeCaseNumber()

                Dim CaseNumText As String = String.Empty
                If caseNumber.Length < 6 Then
                    For i As Integer = 0 To (6 - caseNumber.Length - 1) Step 1
                        CaseNumText = CaseNumText & "0"
                    Next

                End If
                cNum.Text = CaseNumText & caseNumber

                '' Set New Case Pop up Case Type
                Dim caseTypes As New CaseType()
                Dim caseTypeTable As DataTable = caseTypes.GetCaseTypes()
                newCaseType.DataSource = caseTypeTable
                newCaseType.DataTextField = "caseTypeName"
                newCaseType.DataValueField = "CaseTypeID"
                newCaseType.DataBind()

                '' Retrieve Case Informtation
                Dim _case As New _Case(caseNumber)
                SetCaseInformation(_case.GetCaseInformation())

               
                '' DIsable Escalation Text editor buttons & FIll escalation message
                escMessage.TabStripDisplay = False
                escMessage.Toolbar.Items.Clear()
                escMessage.BorderColor = Drawing.Color.LightGray
                escMessage.UseDefaultStyles = Infragistics.WebUI.WebHtmlEditor.UseDefaultStyles.None
                escMessage.Text = "We currently have a shift open that we are attempting to cover. We have been unsuccessful in filling this shift. " & _
                "Below are all the follow-ups that have been made so far. We have looked through the Floaters list and all permanent employees under " & _
                "40 hours and we are still unable to cover the opening. If you have any further suggestions please let us know. We will try to minimize " & _
                "overtime and offer it only if necessary.<br /><br />  Contacted [HRG]<br />Contacted [RSM]"

                '' Retreive follow ups for this case
                RetrieveFollowUps(caseNumber)
                follwoUpGrid.BorderColor = Drawing.Color.Transparent
                follwoUpGrid.BorderStyle = BorderStyle.None
            Catch ex As Exception
                Response.Redirect("default.aspx?Error=true")
            End Try
        End If
       

    End Sub

    Private Sub SetCaseInformation(ByVal table As DataTable)
        
        Dim row As DataRow = table.Rows(0)

        newCaseType.SelectedValue = row.Item("CaseTypeID")
        '' If not an employee case
        If IsDBNull(row.Item("EmployeeID")) Then
            NameText.Visible = False
            EmpoyeeIDText.Visible = False
            contactWrapper.Visible = False
        Else
            If Not IsDBNull(row.Item("LastName")) And Not IsDBNull(row.Item("FirstName")) Then
                If IsDBNull(row.Item("MiddleInitial")) Then
                    name.Text = row.Item("LastName") & ", " & row.Item("FirstName")
                Else
                    name.Text = row.Item("LastName") & ", " & row.Item("FirstName") & " " & row.Item("MiddleInitial")
                    ccaseName.Value = row.Item("LastName") & ", " & row.Item("FirstName") & " " & row.Item("MiddleInitial")
                End If
                name.CssClass = "blockText closedText"
            Else
                name.Text = "Missing"
                name.CssClass = "blockText open"
                ccaseName.Value = "Missing"
            End If

            eid.Text = row.Item("EmployeeID")

            '' Display Phone
            If IsDBNull(row.Item("Phone1")) = False Then
                phone.Text = row.Item("Phone1")
            Else
                phone.Text = "N/A"
            End If

            If IsDBNull(row.Item("Phone2")) = False Then
                altPhone.Text = row.Item("Phone2")
            Else
                altPhone.Text = "N/A"
            End If
        End If

        ''Display Position
        If row.Item("CaseTypeID") <> 9 Then
            positionText.Visible = True

            '' DIsplay Position
            If IsDBNull(row.Item("Position")) = False Then
                position.Text = row.Item("Position")
                position.CssClass = "blockText closedText"
            Else
                position.Text = "Missing"
                position.CssClass = "blockText open"
            End If
        Else
            position.Text = "N/A"
        End If

        '' Display Region
        region.Text = row.Item("RegionName")

        '' DIsplay Plaza And Shift
        If row.Item("CaseTypeID") < 8 Then
            ''Display Plaza 
            '' Hide Plaza Name for Request for Work & Miscellaneous Cases
            If Not IsDBNull(row.Item("PlazaName")) Then
                plazaText.Visible = True
                plaza.Text = row.Item("PlazaName")
                plaza.CssClass = "blockText closedText"
            Else
                plazaText.Visible = True
                plaza.Text = "Missing"
                plaza.CssClass = "blockText open"
            End If

            '' Display Shift
            shiftWrapper.Visible = True
            If Not IsDBNull(row.Item("ShiftDate")) Then
                shiftDate.Text = Format(Date.Parse(row.Item("ShiftDate")), "MM/dd/yyyy")
                shiftDate.CssClass = "blockText closedText"
            Else
                shiftDate.Text = "Missing"
                shiftDate.CssClass = "blockText open"
            End If
            If IsDBNull(row.Item("ShiftTimeIn")) = False Then
                inTime.Text = Format(Date.Parse(row.Item("ShiftTimeIn")), "MM/dd/yyyy HH:mm tt")
                caseShift.Value = inTime.Text
                inTime.CssClass = "blockText closedText"
            Else
                inTime.Text = "Missing"
                inTime.CssClass = "blockText open"
            End If
            If IsDBNull(row.Item("ShiftTimeOut")) = False Then
                outTime.Text = Format(Date.Parse(row.Item("ShiftTimeOut")), "MM/dd/yyyy HH:mm tt")
                endDate.Value = Format(Date.Parse(row.Item("ShiftTimeOut")), "MM/dd/yyyy")
                caseShift.Value = caseShift.Value & " - " & outTime.Text
                outTime.CssClass = "blockText closedText"
            Else
                outTime.Text = "Missing"
                outTime.CssClass = "blockText open"

            End If

            
        Else
            If row.Item("CaseTypeID") = 9 And Not IsDBNull(row.Item("PlazaName")) Then
                plaza.Text = row.Item("PlazaName")
            Else
                plaza.Text = "N/A"
            End If
            shiftWrapper.Visible = False

        End If

        '' DIsplay Notified for Attendance Cases Other than Permanent Opening
        If row.Item("CaseTypeID") < 6 Or row.Item("CaseTypeID") = 7 Then
            If Not IsDBNull(row.Item("Notified")) Then
                notified.Text = row.Item("Notified")
                notified.CssClass = "blockText closedText"
            Else
                notified.Text = "Missing"
                notified.CssClass = "open"
            End If
        Else
            notifiedText.Visible = False
        End If

       '' Display Case Type
        If Not IsDBNull(row.Item("CaseTypeName")) Then
            caseType.Text = row.Item("CaseTypeName")
            caseType.CssClass = "blockText closedText"
        Else
            caseType.Text = "Missing"
            caseType.CssClass = "blockText open"
        End If

        '' Display Reason
        If Not IsDBNull(row.Item("Reason")) Then
            reason.Text = row.Item("Reason")
            reason.CssClass = "blockText closedText"
        Else
            reason.Text = "Missing"
            reason.CssClass = "blockText open"
        End If

        ''Display Status & Add Styling
        status.Text = row.Item("Status")
        Select Case row.Item("Status")
            Case "Open"
                status.CssClass = "blockText status open"
            Case "Partial"
                status.CssClass = "blockText status partial"
            Case "Closed"
                status.CssClass = "blockText status closed"
                closeCaseBtn.Enabled = False
            Case Else
                status.CssClass = "blockText status open"
        End Select

        '' Display Date Entered Create By
        dateEntered.Text = row.Item("DateEntered")
        createdBy.Text = row.Item("CreatedBy")

        '' Display Notes
        If Not IsDBNull(row.Item("Notes")) Then
            notes.Text = row.Item("Notes")
        End If

        'Populate Assign to Drop Down if user is in management role
        If User.IsInRole("Admin") Or User.IsInRole("Manager") Or User.IsInRole("Supervisor") Or User.IsInRole("Team Lead") Then

            Dim assignWrapper As Panel = Me.assignLoginView.FindControl("assignWrapper")
            Dim agents As DropDownList = Me.assignLoginView.FindControl("agents")
            Dim _agents As New _User()
            If agents.Items.Count = 0 Then
                agents.Items.Add(New ListItem("Unassigned", ""))
                agents.AppendDataBoundItems = True
                agents.DataSource = _agents.GetFSCAgents()
                agents.DataTextField = "AgentName"
                agents.DataValueField = "UserID"
                agents.DataBind()
            End If


            If Integer.Parse(row.Item("CaseTypeID")) = 9 Or Integer.Parse(row.Item("CaseTypeID")) = 10 Then
                assignWrapper.Visible = False
            Else
                If Not IsDBNull(row.Item("AssignedTo")) Then
                    agents.SelectedValue = row.Item("AssignedTo")
                End If
            End If

        End If

        '' Get FLoaters List
        Try
            GetFloatersList(row.Item("CaseTypeID"), row.Item("RegionName"), row.Item("PlazaName"))
        Catch exp As Exception
        End Try
    End Sub
    Private Function decodeCaseNumber()
        Dim caseNumber As String = Nothing

        Dim encCaseNumber As String = String.Empty
        encCaseNumber = Request.QueryString("caseNumber")
        Try

            If encCaseNumber <> Nothing And encCaseNumber <> String.Empty Then
                Dim dec As New EncryptString()
                caseNumber = dec.Decrypt(encCaseNumber)
            Else
                Throw New Exception("CaseNumber")
            End If

        Catch ex As Exception
            If encCaseNumber <> Nothing And encCaseNumber <> String.Empty Then
                caseNumber = encCaseNumber
            Else
                Throw
            End If
        End Try
        Return caseNumber
    End Function
    Private Sub GetFloatersList(ByVal caseTypeID As String, ByVal regionName As String, ByVal plazaName As String)
        If Integer.Parse(caseTypeID) <= 7 Then
            Dim _region As New Region()
            _region.Region_Name() = regionName
            Dim regionID As String = _region.GetRegionID()

            Dim _plaza As New Plaza(regionID)
            _plaza.Plaza_Name() = plazaName
            Dim plazaID As String = _plaza.GetPlazaID()

            Dim shiftStartTime As Date = Date.Parse(inTime.Text)
            Dim shiftEndTime As Date = Date.Parse(outTime.Text)
            Dim shift As Integer = 0


            If shiftStartTime >= Date.Parse("4:30") And shiftEndTime <= Date.Parse("15:00") Then
                shift = 1
            ElseIf shiftStartTime >= Date.Parse("10:00") And shiftEndTime <= Date.Parse("23:00") Then
                shift = 2
            ElseIf shiftStartTime >= Date.Parse("20:00") And shiftEndTime <= Date.Parse(Format(shiftStartTime.AddDays(1), "MM/dd/yyyy") & "6:30") Then
            End If
        Else
            floatersWrapper.Visible = False
        End If


    End Sub

    Private Sub RetrieveFollowUps(ByVal caseNumber As String)
        Dim _case As New _Case(caseNumber)
        Dim table As DataTable = _case.GetCaseFollowUps()

        If Not IsPostBack Then

            For Each drcol As DataColumn In table.Columns
                Dim col As New BoundDataField
                col.Key = drcol.ColumnName
                col.DataFieldName = drcol.ColumnName

                Select Case drcol.ColumnName
                    Case "FollowUpID"
                        col.Header.Text = "Case Number"
                    Case "DateEntered"
                        col.Header.Text = "Created"
                        col.DataFormatString = "{0:MM/dd/yyyy hh:mm tt}"
                        'col.Hidden = True
                    Case "EnteredBy"
                        col.Header.Text = "Entered By"
                    Case "FirstName"
                        col.Header.Text = "First Name"
                        col.Width = 75
                    Case "LastName"
                        col.Header.Text = "Last Name"
                        col.Width = 75
                    Case "MiddleInitial"
                        col.Header.Text = "MI"
                        col.Width = 10
                        col.Hidden = True
                    Case "CaseTypeName"
                        col.Header.Text = "Case Type"
                        col.Width = 85
                    Case "Reason"
                        col.Header.Text = "Reason"
                    Case "Notes"
                        col.Header.Text = "Notes"
                        col.Width = 125
                    Case "ShiftDate"
                        col.Header.Text = "Shift Date"
                        col.DataFormatString = "{0:MM/dd/yyyy}"
                    Case "ShiftTimeIn"
                        col.Header.Text = "Time In"
                        col.DataFormatString = "{0:HH:mm tt}"
                    Case "ShiftTimeOut"
                        col.Header.Text = "Time Out"
                        col.DataFormatString = "{0:HH:mm tt}"

                    Case Else
                        col.Hidden = True
                End Select

                follwoUpGrid.Columns.Add(col)
            Next
        End If

        follwoUpGrid.AutoGenerateColumns = False
        follwoUpGrid.DataSource = table
        follwoUpGrid.DataBind()
        follwoUpGrid.Width = Unit.Percentage(100)
        follwoUpGrid.Height = Unit.Percentage(99)
        follwoUpGrid.EmptyRowsTemplate = New EmtpyRowTemplate
        follwoUpGrid.ErrorTemplate = New GridErrorTemplate

    End Sub

    Private Function RetrieveShifts()
        Dim shifts As New Shift()
        Return shifts.GetShifts()
    End Function
    Private Function RetrieveRegions()
        Dim regions As New Region()
        Return regions.GetActiveRegions()
    End Function


    Protected Sub editCaseBtn_Click(sender As Object, e As EventArgs) Handles editCaseBtn.Click
        Try
            '' Populate Region Drop Down

            Dim regionsTable As DataTable = RetrieveRegions()
            If editRegion.Items.Count = 0 Then
                editRegion.Items.Insert(0, New ListItem("Please select a region", ""))
                editRegion.AppendDataBoundItems = True
                editRegion.DataSource = regionsTable
                editRegion.DataTextField = "RegionName"
                editRegion.DataValueField = "RegionID"
                editRegion.DataBind()
            End If
            '' set case region
            Using v As New DataView(regionsTable, "RegionName ='" & region.Text & "'", "", DataViewRowState.CurrentRows)
                Dim rt As DataTable = v.ToTable
                editRegion.SelectedValue = rt.Rows(0).Item("RegionID")
            End Using

            '' Populate Case Types Drop Down
            Dim caseTypes As New CaseType()
            Dim caseTypeTable As DataTable = caseTypes.GetCaseTypes()

            If editCaseType.Items.Count = 0 Then
                editCaseType.Items.Insert(0, New ListItem("Please select a case type", ""))
                editCaseType.AppendDataBoundItems = True

                editCaseType.DataSource = caseTypeTable
                editCaseType.DataTextField = "CaseTypeName"
                editCaseType.DataValueField = "CaseTypeID"
                editCaseType.DataBind()
            End If

            Using v As New DataView(caseTypeTable, "CaseTypeName ='" & caseType.Text & "'", "", DataViewRowState.CurrentRows)
                Dim ct As DataTable = v.ToTable
                editCaseType.SelectedValue = ct.Rows(0).Item("CaseTypeID")
            End Using

            '' Populate Edit Reason Drop Down
            Dim reasons As New Reason(editCaseType.SelectedValue)
            Dim reasonTable As DataTable = reasons.GetReasons()

            If editReason.Items.Count = 0 Then
                editReason.Items.Add(New ListItem("Please select a reason", ""))
                editReason.Items.Add(New ListItem("N/A", "N/A"))

                editReason.AppendDataBoundItems = True
                editReason.DataSource = reasonTable
                editReason.DataTextField = "Reason"
                editReason.DataValueField = "ReasonID"
                editReason.DataBind()
            End If

            Using v As New DataView(reasonTable, "Reason ='" & reason.Text & "'", "", DataViewRowState.CurrentRows)
                Dim rt As DataTable = v.ToTable
                If rt.Rows.Count > 0 Then
                    editReason.SelectedValue = rt.Rows(0).Item("ReasonID")
                Else
                    editReason.SelectedValue = ""
                End If
            End Using

            '' Display Employee Information
            If EmpoyeeIDText.Visible = True Then
                editName.Text = name.Text
                editEID.Text = eid.Text
                editPhone.Text = phone.Text
                editAltPhone.Text = altPhone.Text
            Else
                caseEmpInfoWraper.Visible = False
            End If

            '' Populate Position Drop Down
            If Integer.Parse(editCaseType.SelectedValue) <> 9 Then
                Dim positions As New Position()
                Dim table As New DataTable

                If Integer.Parse(editRegion.SelectedValue) = 7 Then
                    table = positions.GetPositionByRegion(editRegion.SelectedValue)
                Else
                    table = positions.GetPositionByRegion(DBNull.Value)
                End If
                editPosition.Items.Add(New ListItem("Please select a position", ""))
                editPosition.Items.Add(New ListItem("N/A", "N/A"))
                editPosition.AppendDataBoundItems = True
                editPosition.DataSource = table
                editPosition.DataTextField = "Position"
                editPosition.DataValueField = "PositionID"
                editPosition.DataBind()

                Using v As New DataView(table, "Position='" & position.Text & "'", "", DataViewRowState.CurrentRows)
                    Dim pt As DataTable = v.ToTable
                    If pt.Rows.Count > 0 Then
                        editPosition.SelectedValue = pt.Rows(0).Item("PositionID")
                    Else
                        editPosition.SelectedValue = String.Empty
                    End If
                End Using
            Else
                editPosition.Items.Add(New ListItem("N/A", "N/A"))
                positionWrapper.Visible = False
            End If

            '' Populate Plaza Drop Down
            If Integer.Parse(editCaseType.SelectedValue) < 8 Or (plaza.Text <> "N/A" And Integer.Parse(editCaseType.SelectedValue) = 9) Then
                Dim plazas As New Plaza(editRegion.SelectedValue)
                Dim plazasTable As DataTable = plazas.GetPlazaByRegion()

                If editPlaza.Items.Count = 0 Then
                    editPlaza.Items.Add(New ListItem("Please select a plaza", ""))
                    editPlaza.Items.Add(New ListItem("N/A", "N/A"))
                    editPlaza.AppendDataBoundItems = True
                    editPlaza.DataSource = plazasTable
                    editPlaza.DataTextField = "PlazaName"
                    editPlaza.DataValueField = "PlazaID"
                    editPlaza.DataBind()
                End If

                Using v As New DataView(plazasTable, "PlazaName ='" & plaza.Text & "'", "", DataViewRowState.CurrentRows)
                    Dim pt As DataTable = v.ToTable
                    If pt.Rows.Count > 0 Then
                        editPlaza.SelectedValue = pt.Rows(0).Item("PlazaID")
                    Else
                        editPlaza.SelectedValue = ""
                    End If
                End Using
            Else
                editPlaza.Items.Add(New ListItem("N/A", "N/A"))
                plazaWrapper.Visible = False
            End If

            '' Populate Shift Drop Downs
            If Integer.Parse(editCaseType.SelectedValue) < 8 Then
                If shiftDate.Text <> String.Empty And shiftDate.Text <> "Missing" Then
                    editShiftDate.Text = shiftDate.Text
                End If

                If outTime.Text <> String.Empty And outTime.Text <> "Missing" Then
                    editShiftEndDate.Text = Format(Date.Parse(outTime.Text), "MM/dd/yyyy")
                End If

                Dim shiftsTable As DataTable = RetrieveShifts()
                If editShiftTimeIn.Items.Count = 0 Then
                    editShiftTimeIn.Items.Insert(0, New ListItem("Please select a time", ""))
                    editShiftTimeIn.Items.Insert(1, New ListItem("N/A", "N/A"))
                    editShiftTimeIn.AppendDataBoundItems = True

                    editShiftTimeIn.DataSource = shiftsTable
                    editShiftTimeIn.DataTextField = "Shift"
                    editShiftTimeIn.DataValueField = "Shift"
                    editShiftTimeIn.DataBind()
                End If

                If editShiftTimeOut.Items.Count = 0 Then
                    editShiftTimeOut.Items.Insert(0, New ListItem("Please select a time", ""))
                    editShiftTimeOut.Items.Insert(1, New ListItem("N/A", "N/A"))
                    editShiftTimeOut.AppendDataBoundItems = True

                    editShiftTimeOut.DataSource = shiftsTable
                    editShiftTimeOut.DataTextField = "Shift"
                    editShiftTimeOut.DataValueField = "Shift"
                    editShiftTimeOut.DataBind()
                End If

                If inTime.Text <> String.Empty And inTime.Text <> "Missing" Then
                    Dim i As String = Format(Date.Parse(inTime.Text), "HH:mm tt")
                    Dim iin() As String = i.Split(" ")
                    If iin(1) = "AM" And iin(0) = "12:00" Then
                        editShiftTimeIn.SelectedValue = "00:00"
                    ElseIf iin(1) = "AM" And iin(0) = "12:15" Then
                        editShiftTimeIn.SelectedValue = "00:15"
                    ElseIf iin(1) = "AM" And iin(0) = "12:30" Then
                        editShiftTimeIn.SelectedValue = "00:30"
                    ElseIf iin(1) = "AM" And iin(0) = "12:45" Then
                        editShiftTimeIn.SelectedValue = "00:45"
                    Else
                        editShiftTimeIn.SelectedValue = iin(0)
                    End If
                Else
                    editShiftTimeIn.SelectedValue = ""
                End If

                If outTime.Text <> String.Empty And outTime.Text <> "Missing" Then
                    Dim o As String = Format(Date.Parse(outTime.Text), "HH:mm tt")
                    Dim out() As String = o.Split(" ")

                    If out(1) = "AM" And out(0) = "12:00" Then
                        editShiftTimeOut.SelectedValue = "00:00"
                    ElseIf out(1) = "AM" And out(0) = "12:15" Then
                        editShiftTimeOut.SelectedValue = "00:15"
                    ElseIf out(1) = "AM" And out(0) = "12:30" Then
                        editShiftTimeOut.SelectedValue = "00:30"
                    ElseIf out(1) = "AM" And out(0) = "12:45" Then
                        editShiftTimeOut.SelectedValue = "00:45"
                    Else
                        editShiftTimeOut.SelectedValue = out(0)
                    End If
                Else
                    editShiftTimeOut.SelectedValue = ""
                End If

                If Integer.Parse(editCaseType.SelectedValue) <> 6 Then
                    If notifiedText.Visible = True Then

                        If notified.Text <> Nothing And notified.Text <> String.Empty Then
                            If notified.Text = "Missing" Then
                                editNotified.Text = String.Empty
                            Else
                                editNotified.Text = notified.Text
                            End If
                        Else
                            editNotified.Text = "N/A"
                        End If
                    End If
                Else
                    notifiedWrapper.Visible = False
                End If
            Else
                editShiftWrapper.Visible = False
                notifiedWrapper.Visible = False
            End If

            ''Set Notes Field
            editNotes.Text = notes.Text

            ''Populate Case Number ANd DateEntered
            Dim caseNumText As String = Nothing
            Dim caseNum As String = decodeCaseNumber()

            If caseNum.Length < 6 Then
                For i As Integer = 0 To (6 - caseNum.Length - 1) Step 1
                    caseNumText = caseNumText & "0"
                Next
            End If

            caseNumber.Text = caseNumText & caseNum
            createdDate.Text = dateEntered.Text
            CaseTextWrapper.Visible = True

            ''Populate Status Drop Down
            If editStatus.Items.Count = 0 Then
                editStatus.Items.Add(New ListItem("Open", "Open"))
                editStatus.Items.Add(New ListItem("Closed", "Closed"))
            End If

            editStatus.SelectedValue = status.Text
        Catch ex As Exception
            Throw New Exception("An internal error has occurred. The Case you selected could not be retrieved at this time." & ex.Message)
        End Try

    End Sub

    Protected Sub caseSubmitBtn_Click(sender As Object, e As EventArgs) Handles caseSubmitBtn.Click

        If Page.IsValid Then
            Try
                Dim caseNumber As String = decodeCaseNumber()
                Dim userID = User.Identity.Name
                Dim _case As New _Case()

                '' Set Case information
                _case.Case_Number = caseNumber
                _case.Region_ID = editRegion.SelectedValue
                _case.Case_TypeID = editCaseType.SelectedValue
                _case.User_ID = userID
                _case.Case_Date = dateEntered.Text

                If caseEmployeeInfo.Visible = True Then
                    _case.Employee_ID = eid.Text
                    _case.Employee_Name = name.Text
                End If

                If editNotified.Text <> String.Empty Then
                    _case.Notified_ = editNotified.Text
                End If

                If editPosition.SelectedValue <> "0" And editPosition.SelectedValue <> "" And editPosition.SelectedValue <> "N/A" Then
                    _case.Position_ID = editPosition.SelectedValue
                    _case.Position_ = editPosition.SelectedItem.Text
                End If

                If shiftWrapper.Visible = True Then
                    _case.Shift_Date = editShiftDate.Text

                    If editShiftTimeIn.SelectedValue <> "N/A" And editShiftTimeIn.SelectedValue <> String.Empty Then
                        _case.Shift_TimeIn = editShiftDate.Text & " " & editShiftTimeIn.SelectedValue
                    End If

                    If editShiftTimeOut.SelectedValue <> "N/A" And editShiftTimeOut.SelectedValue <> String.Empty Then
                        _case.Shift_TimeOut = editShiftEndDate.Text & " " & editShiftTimeOut.SelectedValue
                    End If
                End If

                If editNotes.Text <> String.Empty Then
                    _case.Notes_ = editNotes.Text
                End If

                If editPlaza.SelectedValue <> "0" And editPlaza.SelectedValue <> String.Empty And editPlaza.SelectedValue <> "N/A" Then
                    _case.Plaza_ID = editPlaza.SelectedValue
                    _case.Plaza_ = editPlaza.SelectedItem.Text
                End If

                If editReason.SelectedValue <> String.Empty Then
                    _case.Reason_ID = editReason.SelectedValue
                    _case.Reason_ = editReason.SelectedItem.Text
                End If

                If caseError.Checked = True Then
                    _case.Case_Error = caseError.Checked
                    _case.Status_ = "Closed"
                Else
                    _case.Case_Error = caseError.Checked
                    _case.Status_ = editStatus.SelectedValue
                End If

                If editStatus.SelectedValue = "Open" Then
                    closeCaseBtn.Enabled = True
                End If

               '' Record Case Changes
                '' If case has not been marked as an error
                Dim changes As String = String.Empty
                Try
                    If caseError.Checked = False Then
                        '' Plaza Change
                        If plaza.Text <> "Missing" Then
                            If editPlaza.SelectedItem.Text <> plaza.Text Then
                                changes = "Plaza Change: " & plaza.Text & " To: " & editPlaza.SelectedItem.Text
                                _case.CaseChange(changes, 1)
                            End If
                        End If
                        '' Position CHange
                        If position.Text <> "Missing" Then
                            If editPosition.SelectedItem.Text <> position.Text Then
                                changes = "Position CHange: " & position.Text & " To: " & editPosition.SelectedItem.Text
                                _case.CaseChange(changes, 2)
                            End If
                        End If

                        '' Notified Change
                        If notified.Text <> "Missing" And notifiedWrapper.Visible = True Then
                            If editNotified.Text <> notified.Text Then
                                changes = "Notified Change: " & notified.Text & " To: " & editNotified.Text
                                _case.CaseChange(changes, 3)
                            End If
                        End If

                        ''Reason Change
                        If editReason.SelectedItem.Text <> reason.Text And reason.Text <> "Missing" Then
                            If editReason.SelectedItem.Text.IndexOf("Disregard") = -1 Then
                                changes = "Reason Change: " & reason.Text & " To: " & editReason.SelectedItem.Text
                                ''_case.CaseChange(changes, 4)
                            ElseIf editReason.SelectedItem.Text.IndexOf("Disregard") > -1 Then
                                changes = "Disregard"
                                _case.CaseChange(changes, 12)
                            End If
                        End If

                        '' Shift Change
                        If shiftWrapper.Visible = True And shiftDate.Text <> "Missing" Then
                            If editShiftDate.Text <> shiftDate.Text Then
                                changes = "Shift Date Change: " & shiftDate.Text & " To: " & editShiftDate.Text
                                _case.CaseChange(changes, 5)
                            End If
                        End If

                        If shiftWrapper.Visible = True And outTime.Text <> "Missing" Then
                            If editShiftEndDate.Text <> Format(Date.Parse(outTime.Text), "MM/dd/yyyy") Then
                                changes = "Shift End Date Change: " & Format(Date.Parse(outTime.Text), "MM/dd/yyyy") & " To: " & editShiftEndDate.Text
                                _case.CaseChange(changes, 6)

                            End If
                        End If

                        If shiftWrapper.Visible = True And inTime.Text <> "Missing" Then
                            If editShiftTimeIn.SelectedValue <> Format(Date.Parse(inTime.Text), "HH:mm") Then
                                changes = "Time In Change: " & Format(Date.Parse(inTime.Text), "HH:mm") & " To: " & editShiftTimeIn.SelectedValue
                                _case.CaseChange(changes, 7)
                            End If
                        End If

                        If shiftWrapper.Visible = True And outTime.Text <> "Missing" Then
                            If editShiftTimeOut.SelectedValue <> Format(Date.Parse(outTime.Text), "HH:mm") Then
                                changes = "Time Out Change: " & Format(Date.Parse(outTime.Text), "HH:mm") & " To: " & editShiftTimeOut.SelectedValue
                                _case.CaseChange(changes, 8)
                            End If
                        End If

                        '' Notes Change
                        If editNotes.Text <> notes.Text Then
                            changes = "Notes Change: " & notes.Text & " To: " & editNotes.Text
                            _case.CaseChange(changes, 9)
                        End If

                        '' Status Change
                        If status.Text <> editStatus.SelectedValue Then
                            changes = "Status Change: " & status.Text & " To: " & editStatus.SelectedValue
                            _case.CaseChange(changes, 11)
                        End If
                    Else
                        changes = "Case marked as error"
                        _case.Case_Date = True
                        _case.CaseChange(changes, 10)

                    End If
                Catch ex As Exception

                End Try

                '' If case is open and not mark as an error
                If caseError.Checked = False And changes <> String.Empty Then

                    If status.Text = "Open" And editStatus.SelectedValue = "Open" And Integer.Parse(editCaseType.SelectedValue) <= 8 Then
                        _case.Email_Case = True
                    End If

                    If changes = "Disregard" Then
                        _case.Previous_Reason = reason.Text
                    End If

                    _case.EditCase()
                    successMessage.Text = "Case has been saved."
                ElseIf caseError.Checked = True Then
                    _case.EditCase()
                    Response.Redirect("Default.aspx", False)
                End If

                '' Update Case Screen
                If positionText.Visible = True Then
                    If positionWrapper.Visible = True Then
                        position.Text = editPosition.SelectedItem.Text
                        position.CssClass = "blockText closedText"
                    Else
                        position.Text = "N/A"
                    End If

                End If

                If plazaWrapper.Visible = True Then
                    If plazaWrapper.Visible = True Then
                        plaza.Text = editPlaza.SelectedItem.Text
                        plaza.CssClass = "blockText closedText"
                    Else
                        plaza.Text = "N/A"
                    End If

                Else
                    plaza.Text = "N/A"
                End If

                If editReason.SelectedValue <> "" Then
                    reason.Text = editReason.SelectedItem.Text
                    reason.CssClass = "blockText closedText"
                Else
                    reason.Text = "Missing"
                    reason.CssClass = "blockText open"
                End If
                If notifiedText.Visible = True Then
                    notified.Text = editNotified.Text
                Else
                    notified.Text = "N/A"
                End If

                If editReason.SelectedItem.Text.IndexOf("Disregard") > -1 Then
                    status.Text = "Closed"
                    editStatus.SelectedValue = "Closed"
                Else
                    status.Text = editStatus.SelectedValue
                End If

                Select Case editStatus.SelectedValue
                    Case "Open"
                        status.CssClass = "blockText status open"
                    Case "Partial"
                        status.CssClass = "blockText status partial"
                    Case "Closed"
                        status.CssClass = "blockText status closed"
                    Case Else
                        status.CssClass = "blockText status open"
                End Select

                notes.Text = editNotes.Text

                If shiftWrapper.Visible = True Then
                    shiftDate.Text = editShiftDate.Text
                    inTime.Text = Format(Date.Parse(editShiftDate.Text & " " & editShiftTimeIn.SelectedItem.Text), "MM/dd/yyyy HH:mm tt")
                    outTime.Text = Format(Date.Parse(editShiftEndDate.Text & " " & editShiftTimeOut.SelectedItem.Text), "MM/dd/yyyy HH:mm tt")
                Else
                    shiftWrapper.Visible = False
                End If
            Catch ex As Exception
                editShiftDate.Value = String.Empty
                If caseError.Checked = True Then
                    caseError.Checked = False
                End If
                If ex.Message.IndexOf("Email") > -1 Then
                    Throw
                Else
                    Throw New Exception("An internal error has occurred. The Case could not be saved at this time. Please try again. Error:" & ex.Message)
                End If
            Finally
                editShiftDate.Value = String.Empty
                If caseError.Checked = True Then
                    caseError.Checked = False
                End If
                Try
                    RetrieveFollowUps(decodeCaseNumber())
                Catch ex As Exception
                End Try
            End Try
        End If



    End Sub
    
    Protected Sub addFollowupBtn_Click(sender As Object, e As EventArgs) Handles addFollowupBtn.Click
        Try
            '' Populate Search Regions Drop Down
            If followUpSearchRegion.Items.Count = 0 Then
                followUpSearchRegion.AppendDataBoundItems = True
                followUpSearchRegion.Items.Add(New ListItem("Please select a region", ""))
                followUpSearchRegion.DataSource = RetrieveRegions()
                followUpSearchRegion.DataTextField = "RegionName"
                followUpSearchRegion.DataValueField = "RegionID"
                followUpSearchRegion.DataBind()
            End If

            '' Populate Search Case Types Drop Down

            Dim caseType As New CaseType()
            Dim case_Number As String = decodeCaseNumber()
            If followUpSearchCaseType.Items.Count = 0 Then
                followUpSearchCaseType.AppendDataBoundItems = True
                followUpSearchCaseType.Items.Add(New ListItem("Please select a case type", ""))
                followUpSearchCaseType.DataSource = caseType.GetFollowUpCaseTypes(case_Number)
                followUpSearchCaseType.DataTextField = "CaseTypeName"
                followUpSearchCaseType.DataValueField = "CaseTypeID"
                followUpSearchCaseType.DataBind()
            End If
        Catch ex As Exception
            Throw New Exception("An internal error has occurred. Error:" & ex.Message)
        End Try

    End Sub

    Protected Sub newCaseSearchBtn_Click(sender As Object, e As EventArgs) Handles newCaseSearchBtn.Click

        Try
            Dim emp As New Employee()

            Dim parameterOne As String = String.Empty
            Dim parameterTwo As String = String.Empty

            Select newCaseSearchOptions.SelectedValue
                Case "Name"
                    If fName.Text <> String.Empty Then
                        parameterOne = fName.Text
                    End If
                    If lName.Text <> String.Empty Then
                        parameterTwo = lName.Text
                    End If
                Case "EID"
                    parameterOne = followUpSearchEID.Text
                Case "PhoneOne"
                    parameterOne = phoneOne.Text
                Case "PhoneTwo"
                    parameterOne = phoneTwo.Text
            End Select


            Dim employeeTable As DataTable = emp.EmployeeSearch(followUpSearchRegion.SelectedValue, newCaseSearchOptions.SelectedValue, parameterOne, parameterTwo)

            If employeeTable.Rows.Count > 0 Then
                If searchResultsMessage.Text <> String.Empty Then
                    searchResultsMessage.Text = String.Empty
                    End If
                If employeeSearchResultsGrid.Columns.Count = 0 Then
                    For Each drcol As DataColumn In employeeTable.Columns
                        Dim col As New BoundDataField
                        col.DataFieldName = drcol.ColumnName
                        col.Key = drcol.ColumnName

                        Select Case drcol.ColumnName
                                Case "EmployeeID"
                                    col.Header.Text = "Employee ID"
                                Case "FirstName"
                                    col.Header.Text = "First Name"
                                Case "LastName"
                                    col.Header.Text = "Last Name"
                                Case "MiddleInitial"
                                    col.Header.Text = "MI"
                                    col.Width = 50
                                Case "Phone1"
                                    col.Header.Text = "Phone 1"
                                Case "Phone2"
                                    col.Header.Text = "Phone 2"
                            End Select

                            employeeSearchResultsGrid.Columns.Add(col)
                        Next
                        employeeSearchResultsGrid.AutoGenerateColumns = False
                    End If


                    employeeSearchResultsGrid.DataSource = employeeTable
                    employeeSearchResultsGrid.DataBind()

                    employeeSearchResultsGrid.Width = Unit.Percentage(100)
                    employeeSearchResultsGrid.Height = Unit.Pixel(250)
                    employeeSearchResultsGrid.BorderStyle = BorderStyle.None
                    employeeSearchResultsGrid.EmptyRowsTemplate = New EmtpyRowTemplate
                Else
                    searchResultsMessage.Text = "No Employees found"
                End If
                'End Using

        Catch ex As Exception

            Throw New Exception("An internal error has occurred. Error:" & ex.Message)

        End Try

    End Sub
    Protected Sub employeeSearchResults_InitializeRow(sender As Object, e As Infragistics.Web.UI.GridControls.RowEventArgs) Handles employeeSearchResultsGrid.InitializeRow
        If e.Row.Items(5).Text Is Nothing Or e.Row.Items(5).Text = String.Empty Then
            e.Row.Items(5).Text = "N/A"
        End If
    End Sub
    Private Sub SetFollowUpForm(ByVal caseTypeID As String)
        ''Populate Follow Up Reasons Drop Down

        Dim reasons As New Reason(caseTypeID)
        If followUpCaseReason.Items.Count <> 0 Then
            followUpCaseReason.Items.Clear()
        End If
        followUpCaseReason.Items.Add(New ListItem("Please select a reason", ""))
        followUpCaseReason.Items.Add(New ListItem("N/A", "N/A"))
        followUpCaseReason.AppendDataBoundItems = True
        If edit.Value <> "true" Then
            followUpCaseReason.DataSource = reasons.GetNewCaseReasons()
        Else
            followUpCaseReason.DataSource = reasons.GetReasons()
        End If

        followUpCaseReason.DataTextField = "Reason"
        followUpCaseReason.DataValueField = "ReasonID"
        followUpCaseReason.DataBind()

        ' If follow Up Case type is Shift Coverage
        If Integer.Parse(caseTypeID) = 5 Then
            followUpCaseNotifiedWrapper.Visible = True
            followUpCaseShiftWrapper.Visible = True

            If followUpCaseShiftDate.Text <> String.Empty Then
                followUpCaseShiftDate.Text = String.Empty
            End If
            If followUpCaseShiftEndDate.Text <> String.Empty Then
                followUpCaseShiftEndDate.Text = String.Empty
            End If

            If followUpCaseNotified.Text <> String.Empty Then
                followUpCaseNotified.Text = String.Empty
            End If

            '' Populate Shift Drop Downs
            Dim shifts As New Shift()

            Dim shiftsTable As DataTable = shifts.GetShifts
            followUpCaseShiftTimeIn.Items.Add(New ListItem("Please select an in time", ""))
            followUpCaseShiftTimeOut.Items.Add(New ListItem("Please select an out time", ""))
            followUpCaseShiftTimeIn.Items.Add(New ListItem("N/A", "N/A"))
            followUpCaseShiftTimeOut.Items.Add(New ListItem("N/A", "N/A"))
            followUpCaseShiftTimeIn.AppendDataBoundItems = True
            followUpCaseShiftTimeOut.AppendDataBoundItems = True

            followUpCaseShiftTimeIn.DataSource = shiftsTable
            followUpCaseShiftTimeIn.DataTextField = "Shift"
            followUpCaseShiftTimeIn.DataValueField = "Shift"
            followUpCaseShiftTimeIn.DataBind()

            followUpCaseShiftTimeOut.DataSource = shiftsTable
            followUpCaseShiftTimeOut.DataTextField = "Shift"
            followUpCaseShiftTimeOut.DataValueField = "Shift"
            followUpCaseShiftTimeOut.DataBind()

        Else
            followUpCaseShiftWrapper.Visible = False
            followUpCaseNotifiedWrapper.Visible = False
        End If
        followUpCaseNotes.Text = String.Empty

    End Sub

    Protected Sub newFollowUpCaseNextBtn_Click(sender As Object, e As EventArgs) Handles newFollowUpCaseNextBtn.Click
        Try
            '' Set Case Type Text
            If edit.Value <> "true" Then
                followUpCaseType.Text = followUpSearchCaseType.SelectedItem.Text
            End If

            '' Set Form
            SetFollowUpForm(followUpSearchCaseType.SelectedValue)
            
            '' Create Follow Up Case
            '' Retrieve Follow ID 
            Dim caseNumb As String = decodeCaseNumber()
            Dim userID = User.Identity.Name

            Dim _followUp As New FollowUp(followUpSearchCaseType.SelectedValue, caseNumb, userID, employeeID.Value)

            _followUp.CreateCase()

            Dim followUpID As String = _followUp.Follow_ID()

            If followUpID <> -1 Then
                '' Format Follw Up Case Number
                Dim CaseNumText As String = String.Empty
                If caseNumb.Length < 6 Then
                    For i As Integer = 0 To (6 - caseNumb.Length - 1) Step 1
                        CaseNumText = CaseNumText & "0"
                    Next

                End If
                If followUpID.Length < 2 Then
                    caseNumber.Text = CaseNumText & caseNumb & "-0" & followUpID
                Else
                    caseNumber.Text = CaseNumText & caseNumb & "-" & followUpID
                End If
                Dim followUpCookie As HttpCookie

                If Not Request.Cookies("followUp") Is Nothing Then
                    followUpCookie = Request.Cookies("followUp")
                Else
                    followUpCookie = New HttpCookie("followUp")
                End If
                followUpCookie.Values("followUpID") = followUpID
                followUpCookie.Expires = Date.Now.AddDays(1)
                Response.Cookies.Add(followUpCookie)

                
            Else
                Throw New Exception("Coverage for this shift has already been provided. If a change needs to be made, please contact your supervisor, or team lead for assistance.")
            End If

            createdDate.Text = Format(Date.Now, "MMMM dd, yyyy HH:mm:ss tt")
            CaseTextWrapper.Visible = True

        Catch ex As Exception When ex.Message = "Coverage for this shift has already been provided. If a change needs to be made, please contact your supervisor, or team lead for assistance."""
            Throw
        Catch ex As Exception When ex.Message <> "Coverage for this shift has already been provided. If a change needs to be made, please contact your supervisor, or team lead for assistance."""
            Throw New Exception("An internal error has occurred. The Case could not be created at this time. Please try creating the case again. Error:" & ex.Message)
        Finally
            If employeeID.Value <> String.Empty Then
                employeeID.Value = String.Empty
            End If
        End Try

    End Sub

    Protected Sub followUpCaseSubmitBtn_Click(sender As Object, e As EventArgs) Handles followUpCaseSubmitBtn.Click
        Try
            If Page.IsValid Then
                Dim caseNum As String = decodeCaseNumber()
                Dim followUpId As String = String.Empty
                If Request.Cookies("followUp") IsNot Nothing Then
                    Dim followUpCookie As HttpCookie = Request.Cookies("followUp")
                    followUpId = followUpCookie("followUpID")
                    followUpCookie.Expires = Date.Now.AddDays(-1)
                Else
                    Dim caseArray() As String = editFollowUpID.Value.Split("-")
                    followUpId = caseArray(1)
                End If

                Try
                    Dim _followUp As New FollowUp(followUpId, caseNum)

                    '' Set Reason
                    If followUpCaseReason.SelectedValue <> "N/A" Then
                        _followUp.Reason_ID = followUpCaseReason.SelectedValue
                   
                    End If

                    '' Set Notes
                    If followUpCaseNotes.Text <> Nothing And followUpCaseNotes.Text <> String.Empty Then
                        _followUp.Notes_ = followUpCaseNotes.Text
                    End If

                    '' Set Shift and Notifed Information
                    If followUpCaseShiftWrapper.Visible = True Then

                        Dim iinTime As String = String.Empty
                        Dim ooutTime As String = String.Empty

                        If followUpCaseShiftTimeIn.SelectedValue <> "N/A" Then
                            iinTime = followUpCaseShiftDate.Text & " " & followUpCaseShiftTimeIn.SelectedValue
                            _followUp.Shift_TimeIn = iinTime
                        End If

                        If followUpCaseShiftTimeOut.SelectedValue <> "N/A" Then
                            ooutTime = followUpCaseShiftEndDate.Text & " " & followUpCaseShiftTimeOut.SelectedValue
                            _followUp.Shift_TimeOut = ooutTime
                        End If

                        If Integer.Parse(followUpCaseReason.SelectedItem.Text.IndexOf("Covering")) > -1 Or Integer.Parse(followUpCaseReason.SelectedItem.Text.IndexOf("Disregard")) > -1 Then
                            _followUp.Shift_Date = followUpCaseShiftDate.Text
                            _followUp.Shift_EndDate = followUpCaseShiftEndDate.Text
                        End If

                    End If

                    If followUpCaseNotifiedWrapper.Visible = True Then

                        If Trim(followUpCaseNotified.Text) <> "N/A" Then
                            _followUp.Notified_ = followUpCaseNotified.Text
                        End If
                    End If

                    '' Submit Case Information
                    If edit.Value <> "true" Then
                        _followUp.CompleteCase()
                    Else
                        '' If editing followups enter in changes maded
                        Dim followUPTable As New DataTable
                        Dim changes As String = String.Empty
                        _followUp.User_ID = User.Identity.Name

                        followUPTable = _followUp.GetCaseInformation()

                        If followUpCaseError.Checked = False Then
                            If Not IsDBNull(followUPTable.Rows(0).Item("Notified")) Then
                                If followUpCaseReason.SelectedItem.Text.IndexOf("Covering") > -1 Then
                                    If followUpCaseNotified.Text <> followUPTable.Rows(0).Item("Notified") Then
                                        changes = "Notified Change: " & followUPTable.Rows(0).Item("Notified") & " To: " & followUpCaseNotified.Text
                                        _followUp.CaseChange(changes, 3)
                                    End If
                                End If

                            End If

                            If Not IsDBNull(followUPTable.Rows(0).Item("Reason")) Then
                                Dim reason As String = followUPTable.Rows(0).Item("Reason")
                                If followUpCaseReason.SelectedItem.Text <> reason Then
                                    If followUpCaseReason.SelectedItem.Text.IndexOf("Disregard") = -1 Then
                                        changes = "Reason Change: " & followUPTable.Rows(0).Item("Reason") & " To:" & followUpCaseReason.SelectedItem.Text
                                        _followUp.CaseChange(changes, 4)
                                    Else
                                        '' If reason is changed to Disreagrd set changes
                                        If reason.IndexOf("Disregard") = -1 And followUpCaseReason.SelectedItem.Text.IndexOf("Disregard") > -1 Then
                                            changes = "Disregard"
                                            _followUp.CaseChange(changes, 12)
                                        End If
                                    End If
                                End If

                            Else
                                changes = "Reason Change:   To " & followUpCaseReason.SelectedItem.Text
                                _followUp.CaseChange(changes, 4)
                            End If

                            If Not IsDBNull(followUPTable.Rows(0).Item("ShiftDate")) Then
                                If followUpCaseReason.SelectedItem.Text.IndexOf("Covering") > -1 Then
                                    If followUpCaseShiftDate.Text <> Format(Date.Parse(followUPTable.Rows(0).Item("ShiftDate")), "MM/dd/yyyy") Then
                                        changes = "Shift Date Change: " & Format(Date.Parse(followUPTable.Rows(0).Item("ShiftDate")), "MM/dd/yyyy") & " To: " & followUpCaseShiftDate.Text
                                        _followUp.CaseChange(changes, 5)
                                    End If
                                End If

                            End If

                            If Not IsDBNull(followUPTable.Rows(0).Item("ShiftTimeOut")) Then

                                If followUpCaseReason.SelectedItem.Text.IndexOf("Covering") > -1 Then
                                    If followUpCaseShiftEndDate.Text <> Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeOut")), "MM/dd/yyyy") Then
                                        changes = "Shift End Date Change: " & Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeOut")), "MM/dd/yyyy") & " To: " & followUpCaseShiftEndDate.Text
                                        _followUp.CaseChange(changes, 6)
                                    End If
                                End If

                            End If

                            If Not IsDBNull(followUPTable.Rows(0).Item("ShiftTimeIn")) Then
                                If followUpCaseReason.SelectedItem.Text.IndexOf("Covering") > -1 Then
                                    If followUpCaseShiftTimeIn.SelectedValue <> Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeIn")), "HH:mm") Then
                                        changes = "Time In Change: " & Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeIn")), "HH:mm") & " To: " & followUpCaseShiftTimeIn.SelectedValue
                                        _followUp.CaseChange(changes, 7)
                                    End If
                                End If
                            End If

                            If Not IsDBNull(followUPTable.Rows(0).Item("ShiftTimeOut")) Then
                                If followUpCaseReason.SelectedItem.Text.IndexOf("Covering") > -1 Then
                                    If followUpCaseShiftTimeOut.SelectedValue <> Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeOut")), "HH:mm") Then
                                        changes = "Time Out Change: " & Format(Date.Parse(followUPTable.Rows(0).Item("ShiftTimeOut")), "HH:mm") & " To: " & followUpCaseShiftTimeOut.SelectedValue
                                        _followUp.CaseChange(changes, 8)
                                    End If
                                End If
                            End If

                            If IsDBNull(followUPTable.Rows(0).Item("Notes")) And followUpCaseNotes.Text <> String.Empty Then
                                changes = "Notes Change: " & followUPTable.Rows(0).Item("Notes") & " To: " & followUpCaseNotes.Text
                                _followUp.CaseChange(changes, 9)
                            Else
                                If followUpCaseNotes.Text <> followUPTable.Rows(0).Item("Notes") Then
                                    changes = "Notes Change: " & followUPTable.Rows(0).Item("Notes") & " To: " & followUpCaseNotes.Text
                                    _followUp.CaseChange(changes, 9)
                                End If
                            End If
                        Else

                            changes = "Case marked as error"
                            _followUp.Case_Error = True
                            _followUp.CaseChange(changes, 10)
                        End If

                        If changes <> String.Empty Then
                            _followUp.EditCase()
                        End If

                    End If

                    successMessage.Text = "Follow Up Case has been saved."
                    If followUpCaseError.Checked = True Then
                        followUpCaseError.Checked = False
                    End If

                    followUpCaseShiftDate.Value = String.Empty
                    Try
                        RetrieveFollowUps(decodeCaseNumber())
                    Catch ex As Exception
                    End Try
                Catch ex As Exception
                    followUpCaseShiftDate.Value = String.Empty
                    Try
                        RetrieveFollowUps(decodeCaseNumber())
                    Catch exp As Exception
                    End Try
                    If ex.Message.IndexOf("Email") > -1 Then
                        Throw
                    Else
                        Throw New Exception("An internal error has occurred. The Case could not be saved at this time. Please try again. Error: " & ex.Message)
                    End If

                End Try

            Else
                Throw New Exception("An internal error has occurred. The Case could not be saved at this time. Please try again. Error: Page is invalid")

            End If
        Catch ex As Exception

            Throw
        End Try
    End Sub
    Protected Sub followUpCaseGrid_InitializeRow(sender As Object, e As Infragistics.Web.UI.GridControls.RowEventArgs) Handles follwoUpGrid.InitializeRow
        Dim followUpId As String = e.Row.Items(0).Text
        Dim CaseNumber As String = decodeCaseNumber()

        Dim caseNum As String = String.Empty

        If CaseNumber.Length < 6 Then
            For I As Integer = 0 To (6 - CaseNumber.Length - 1) Step 1
                caseNum = caseNum & "0"
            Next
        End If

        If followUpId.Length < 2 Then
            e.Row.Items(0).Text = caseNum & CaseNumber & "-0" & followUpId
        Else
            e.Row.Items(0).Text = caseNum & CaseNumber & "-" & followUpId
        End If

        '' If Reason is for Shift Coervage CHeck if Shift Date and Times are entered
        If e.Row.Items(12).Text.IndexOf("Covering") > -1 Then
            If e.Row.Items(6).Text Is Nothing Or e.Row.Items(6).Text = String.Empty Then
                e.Row.Items(6).Text = "Missing"
                e.Row.Items(6).CssClass = "open"
            End If
            If e.Row.Items(7).Text Is Nothing Or e.Row.Items(7).Text = String.Empty Then
                e.Row.Items(7).Text = "Missing"
                e.Row.Items(7).CssClass = "open"
            End If
            If e.Row.Items(8).Text Is Nothing Or e.Row.Items(3).Text = String.Empty Then
                e.Row.Items(8).Text = "Missing"
                e.Row.Items(8).CssClass = "open"
            End If
        Else
            e.Row.Items(6).Text = "N/A"
            e.Row.Items(7).Text = "N/A"
            e.Row.Items(8).Text = "N/A"
        End If

        'IF Case Type  = Shift Coverage, check if name is entered
        If e.Row.Items(11).Text = "Shift Coverage" Then
            If e.Row.Items(3).Text Is Nothing Or e.Row.Items(3).Text = String.Empty Then
                e.Row.Items(3).Text = "Missing"
                e.Row.Items(3).CssClass = "open"
                If e.Row.Items(4).Text Is Nothing Or e.Row.Items(6).Text = String.Empty Then
                    e.Row.Items(4).Text = "Missing"
                    e.Row.Items(4).CssClass = "open"
                End If
            End If
        Else
            If e.Row.Items(3).Text Is Nothing Or e.Row.Items(3).Text = String.Empty Then
                e.Row.Items(3).Text = "N/A"

            End If
            If e.Row.Items(4).Text Is Nothing Or e.Row.Items(4).Text = String.Empty Then
                e.Row.Items(4).Text = "N/A"

            End If
        End If

        '' Check is Reason has been entered
        If e.Row.Items(12).Text Is Nothing Or e.Row.Items(12).Text = String.Empty Then
            e.Row.Items(12).Text = "Missing"
            e.Row.Items(12).CssClass = "open"
        End If

        '' CHeck if notes are entered
        If e.Row.Items(13).Text Is Nothing Or e.Row.Items(13).Text = String.Empty Then
            e.Row.Items(13).Text = "N/A"

        End If

        Dim names() As String = e.Row.Items(2).Text.Split(" ")
        Dim firstIntial As String = names(0).Substring(0, 1)
        e.Row.Items(2).Text = firstIntial & "." & names(1)

    End Sub

    Protected Sub editFollowUpBtn_Click(sender As Object, e As EventArgs) Handles editFollowUpBtn.Click
        Try
            Dim followUpTable As New DataTable
            Dim _caseNumber As String = String.Empty
            Dim fID As String = String.Empty
            followUPCaseErrorWrapper.Visible = True

            
            '' Determine Follow Up ID 
            If followUpID.Value <> String.Empty Then
                Dim caseIDArray() As String = followUpID.Value.Split("-")
                _caseNumber = caseIDArray(0)
                fID = caseIDArray(1)
                Dim followUpCookie As HttpCookie

                If Not Request.Cookies("followUp") Is Nothing Then
                    followUpCookie = Request.Cookies("followUp")
                Else
                    followUpCookie = New HttpCookie("followUp")
                End If

                followUpCookie.Values("followUpID") = fID
                followUpCookie.Expires = Date.Now.AddDays(1)
                Response.Cookies.Add(followUpCookie)
            Else
                Throw New Exception("Follow Up id invalid.")
            End If

            '' Create FOllowUp Instance and Get follow up information
            Dim _followUp As New FollowUp(fID, _caseNumber)
            followUpTable = _followUp.GetCaseInformation()

            '' Determine Case Type and Reason ID to get reason options
            followUpCaseType.Text = caseTypeName.Value
            _followUp.Case_Type = caseTypeName.Value
            If Not IsDBNull(followUpTable.Rows(0).Item(1)) Then
                _followUp.Reason_ = followUpTable.Rows(0).Item(1)
            End If

            _followUp.RetrieveIDInformation()

            ''Set Form 
            SetFollowUpForm(_followUp.Case_TypeID)

            '' Set Case Information
            caseNumber.Text = editFollowUpID.Value
            createdDate.Text = Format(followUpTable.Rows(0).Item(7), "MM/dd/yyyy HH:mm:ss tt")

            '' Show Employee Information
            If employeeID.Value <> Nothing And employeeID.Value <> String.Empty Then
                empInfoWrapper.Visible = True
            Else
                empInfoWrapper.Visible = False
            End If

            ''Set Reason

            followUpCaseReason.SelectedValue = _followUp.Reason_ID()

            '' Set Shift Information
            If Integer.Parse(_followUp.Case_TypeID) = 5 Then

                '' Set Shift Date
                If Not IsDBNull(followUpTable.Rows(0).Item(3)) Then
                    followUpCaseShiftDate.Text = followUpTable.Rows(0).Item(3)
                Else
                    followUpCaseShiftDate.Text = Format(Date.Now, "MM/dd/yyyy")
                End If

                '' Set In Time
                If Not IsDBNull(followUpTable.Rows(0).Item(4)) Then
                    followUpCaseShiftTimeIn.SelectedValue = Format(followUpTable.Rows(0).Item(4), "HH:mm")
                Else
                    followUpCaseShiftTimeIn.SelectedValue = "N/A"
                End If

                '' Set End Date  and Out Time
                If Not IsDBNull(followUpTable.Rows(0).Item(5)) Then
                    followUpCaseShiftEndDate.Text = Format(followUpTable.Rows(0).Item(5), "MM/dd/yyyy")
                    followUpCaseShiftTimeOut.SelectedValue = Format(followUpTable.Rows(0).Item(5), "HH:mm")
                Else
                    followUpCaseShiftEndDate.Text = Format(Date.Now, "MM/dd/yyyy")
                    followUpCaseShiftTimeOut.SelectedValue = "N/A"
                End If

                ''Set Notified
                If Not IsDBNull(followUpTable.Rows(0).Item(6)) Then
                    followUpCaseNotified.Text = followUpTable.Rows(0).Item(6)
                Else
                    followUpCaseNotified.Text = "N/A"
                End If
            End If

            If Not IsDBNull(followUpTable.Rows(0).Item(2)) Then
                followUpCaseNotes.Text = followUpTable.Rows(0).Item(2)
            End If

            CaseTextWrapper.Visible = True
        
        Catch ex As Exception
            Throw New Exception("An internal error has occurred. The system was unable to retrieve the selected case. Error:" & ex.Message)
        End Try
    End Sub

    Protected Sub escSubmitBtn_Click(sender As Object, e As EventArgs) Handles escSubmitBtn.Click
        Try
            'Dim table As New DataTable
            Dim caseNumber As String = decodeCaseNumber()

            Dim caseNum As String = String.Empty

            If caseNumber.Length < 6 Then
                For I As Integer = 0 To (6 - caseNumber.Length - 1) Step 1
                    caseNum = caseNum & "0"
                Next
            End If

            caseNum = caseNum & caseNumber

            '' Create case Instance
            Dim __case As New _Case()
            __case.Case_Number = cNum.Text
            __case.Case_Date = dateEntered.Text
            __case.Employee_Name = name.Text
            __case.Employee_ID = eid.Text
            __case.Region_ = region.Text
            __case.Plaza_ = plaza.Text
            __case.Position_ = position.Text
            __case.Case_Type = caseType.Text
            __case.Reason_ = reason.Text
            __case.Notified_ = notified.Text
            __case.Shift_Date = shiftDate.Text
            __case.Shift_TimeIn = inTime.Text
            __case.Shift_TimeOut = outTime.Text
            __case.Notes_ = notes.Text
            __case.User_ID = User.Identity.Name
            __case.Escalation_Message = escMessage.Text.Replace("<p>", "<p style=""font-family:Arial, Sans-Serif;font-size:12px"">")

            __case.Escalate()
            successMessage.Text = "Escalation has been sent."

        Catch ex As Exception
            Throw New Exception("Email was unable to be sent at this time. Please try sending the escalation again, or notify the Plaza accordingly. Error:" & ex.Message)
        End Try
    End Sub

    Protected Sub editCaseBackBtn_Click(sender As Object, e As EventArgs) Handles editCaseBackBtn.Click
        Try
            RetrieveFollowUps(decodeCaseNumber())

        Catch ex As Exception
        End Try
    End Sub

    Protected Sub followUpCaseBackBtn_Click(sender As Object, e As EventArgs) Handles followUpCaseBackBtn.Click
        Try
            RetrieveFollowUps(decodeCaseNumber())
        Catch ex As Exception
        End Try
    End Sub

    Protected Sub newCaseSubmitBtn_Click(sender As Object, e As EventArgs) Handles newCaseSubmitBtn.Click
        If editNewCaseSelectOptions.SelectedValue = "Existing" Then

            Session("Region") = region.Text
            Session("CaseTypeID") = newCaseType.SelectedValue
            Session("CaseType") = newCaseType.SelectedItem.Text
            Session("Name") = name.Text
            Session("CaseNumber") = cNum.Text

            If eid.Text <> String.Empty Then

                Session("EID") = eid.Text
                Session("Phone") = phone.Text
                Session("AltPhone") = altPhone.Text
            Else
                Session("Plaza") = plaza.Text
            End If

            Response.Redirect("CreateNewCase.aspx", False)
        Else
            Session.RemoveAll()
            Response.Redirect("CreateNewCase.aspx", False)
        End If
    End Sub
    Protected Sub sendTemplateBtn_Click(sender As Object, e As EventArgs) Handles sendTemplateBtn.Click
        Try

            '' Create case Instance
            Dim __case As New _Case()
            __case.Case_Number = cNum.Text
            __case.Case_Date = dateEntered.Text
            __case.Employee_Name = name.Text
            __case.Employee_ID = eid.Text
            __case.Region_ = region.Text
            __case.Plaza_ = plaza.Text
            __case.Position_ = position.Text
            __case.Case_Type = caseType.Text
            __case.Reason_ = reason.Text
            __case.Notified_ = notified.Text
            __case.Shift_Date = shiftDate.Text
            __case.Shift_TimeIn = inTime.Text
            __case.Shift_TimeOut = outTime.Text
            __case.Notes_ = notes.Text
            __case.User_ID = User.Identity.Name

            ''Resend Template
            __case.ResendTemplate()


            successMessage.Text = "Template has been sent."
            Try
                RetrieveFollowUps(decodeCaseNumber())
            Catch ex As Exception
            End Try
        Catch ex As Exception
            Try
                RetrieveFollowUps(decodeCaseNumber())
            Catch exp As Exception
            End Try
            Throw
        End Try
    End Sub

    Protected Sub sendFollowUpBtn_Click(sender As Object, e As EventArgs) Handles sendFollowUpBtn.Click

        Dim caseNumber As String = decodeCaseNumber()
        Dim fID() As String = followUpID.Value.Split("-")
        Try
            Dim _followUp As New FollowUp(fID(1), caseNumber)
            _followUp.ResendTemplate()
            successMessage.Text = "Template has been sent"
        Catch ex As Exception
            Try
                RetrieveFollowUps(caseNumber)
            Catch exp As Exception
            End Try
            Throw
        End Try
    End Sub

    Protected Sub newFollowUpBackBtn_Click(sender As Object, e As EventArgs) Handles newFollowUpBackBtn.Click
        Try
            RetrieveFollowUps(decodeCaseNumber())
        Catch ex As Exception
        End Try
    End Sub

    Protected Sub exitSubmitBtn_Click(sender As Object, e As EventArgs) Handles exitSubmitBtn.Click
        Try
            '' Get CaseNumber
            Dim caseNum As String = decodeCaseNumber()

            '' Get FollowUP ID
            Dim fid As String = String.Empty
            If Request.Cookies("followUp") IsNot Nothing Then
                Dim followUpCookie As HttpCookie = Request.Cookies("followUp")
                fid = followUpCookie("followUpID")
                followUpCookie.Expires = Date.Now.AddDays(-1)
                Response.Cookies.Add(followUpCookie)
            Else
                Dim id() As String = followUpID.Value.Split("-")
                fid = id(1)
            End If

            '' Create FollowUp Instance And Call Exit Case
            Dim _followUp As New FollowUp(fid, caseNum)

            '' Set User ID 
            _followUp.User_ID = User.Identity.Name

            _followUp.ExitCase()

            successMessage.Text = "Follow Up Case has been saved."

            Try
                RetrieveFollowUps(decodeCaseNumber())
            Catch ex As Exception

            End Try
        Catch ex As Exception
            Throw New Exception("An internal error has occurred. The Case could not be saved at this time. Please try again. Error: " & ex.Message)
        End Try
    End Sub
   
    Protected Sub agentsApplyBtn_Click(sender As Object, e As EventArgs)
        Try
            Dim agents As DropDownList = Me.assignLoginView.FindControl("agents")
            Dim caseNumber As String = decodeCaseNumber()

            Dim __case As New _Case(caseNumber)
            If agents.SelectedValue <> String.Empty Then
                __case.User_ID = agents.SelectedValue
            End If

            __case.AssignCase()

            If agents.SelectedValue <> String.Empty Then
                successMessage.Text = "Case has been assigned."
            Else
                successMessage.Text = "Case has been unassigned."
            End If

            
        Catch ex As Exception
            Throw New Exception("Unable to assign the case at this time. Please try again later. Error: " & ex.Message)
        End Try
        
    End Sub

    Protected Sub closeCaseBtn_Click(sender As Object, e As EventArgs) Handles closeCaseBtn.Click
        Try
            Dim caseNumber As String = decodeCaseNumber()

            Dim __case As New _Case(caseNumber)
            __case.User_ID = User.Identity.Name
            __case.CloseCase()
           

            Try
                Dim changes = "Status Change: " & status.Text & " To: Closed"
                __case.CaseChange(changes, 11)
            Catch ex As Exception
            End Try

            successMessage.Text = "Case has been closed."
            status.CssClass = "blockText status closed"
            status.Text = "Closed"
            closeCaseBtn.Enabled = False
           
        Catch ex As Exception
            Throw New Exception("Unable to close the case at this time. Please try again later. Error: " & ex.Message)
        End Try
    End Sub
End Class
